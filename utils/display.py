import streamlit as st
from typing import Dict, List
import pandas as pd
import json


def display_search_result(result: Dict):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞ –≤ —Å—Ç–∏–ª–µ –Ø–Ω–¥–µ–∫—Å–∞"""
    with st.container():
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ —Å—Å—ã–ª–∫–æ–π
        title_html = f'<h3 style="margin: 0; font-size: 18px;"><a href="{result["url"]}" target="_blank" style="color: #1a0dab; text-decoration: none;">{result["title"]}</a></h3>'
        st.markdown(title_html, unsafe_allow_html=True)

        # URL –∏ —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        domain_type = f'<p style="margin: 0; color: #006621; font-size: 14px;">{result["domain"]} ‚Ä¢ {get_result_type_emoji(result["result_type"])} {get_result_type_name(result["result_type"])}</p>'
        st.markdown(domain_type, unsafe_allow_html=True)

        # –°–Ω–∏–ø–ø–µ—Ç
        if result['snippet']:
            st.markdown(
                f'<p style="margin: 5px 0; color: #545454; font-size: 14px; line-height: 1.4;">{result["snippet"]}</p>', unsafe_allow_html=True)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if result['additional_info']:
            st.markdown(
                f'<p style="margin: 0; color: #70757a; font-size: 12px; font-style: italic;">{result["additional_info"]}</p>', unsafe_allow_html=True)

        st.markdown(
            '<hr style="margin: 15px 0; border: none; border-top: 1px solid #ebebeb;">', unsafe_allow_html=True)


def get_result_type_emoji(result_type: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    emojis = {
        'maps': 'üó∫Ô∏è',
        'maps_2gis': 'üìç',
        'realestate': 'üè†',
        'government': 'üèõÔ∏è',
        'encyclopedia': 'üìö',
        'website': 'üåê'
    }
    return emojis.get(result_type, 'üîó')


def get_result_type_name(result_type: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    names = {
        'maps': '–ö–∞—Ä—Ç—ã',
        'maps_2gis': '2GIS',
        'realestate': '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å',
        'government': '–ì–æ—Å—Å–∞–π—Ç',
        'encyclopedia': '–≠–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—è',
        'website': '–í–µ–±-—Å–∞–π—Ç'
    }
    return names.get(result_type, '–°–∞–π—Ç')


def display_search_results_grid(results: List[Dict], columns: int = 1):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –≤–∏–¥–µ —Å–µ—Ç–∫–∏"""
    if columns == 1:
        for result in results:
            display_search_result(result)
    else:
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ –∫–æ–ª–æ–Ω–∫–∏
        cols = st.columns(columns)
        for idx, result in enumerate(results):
            with cols[idx % columns]:
                display_search_result(result)


def display_statistics_cards(stats: Dict):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric("–í—Å–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", stats['total_results'])

    with col2:
        st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤", stats['unique_addresses'])

    with col3:
        st.metric("–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ –∞–¥—Ä–µ—Å",
                  f"{stats['avg_results_per_address']:.1f}")

    with col4:
        st.metric("–ü–æ–∫—Ä—ã—Ç–∏–µ –∫–∞—Ä—Ç–∞–º–∏", f"{stats['maps_coverage_percent']:.1f}%")


def create_filter_sidebar(df: pd.DataFrame) -> Dict:
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
    st.sidebar.header("üîç –§–∏–ª—å—Ç—Ä—ã")

    filters = {}

    # –§–∏–ª—å—Ç—Ä –ø–æ –¥–æ–º–µ–Ω—É
    domains = ['–í—Å–µ'] + sorted(df['domain'].unique().tolist())
    selected_domain = st.sidebar.selectbox("–î–æ–º–µ–Ω", domains)
    if selected_domain != '–í—Å–µ':
        filters['domain'] = selected_domain

    # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    result_types = ['–í—Å–µ'] + sorted(df['result_type'].unique().tolist())
    selected_type = st.sidebar.selectbox("–¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", result_types)
    if selected_type != '–í—Å–µ':
        filters['result_type'] = selected_type

    # –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∑–∏—Ü–∏–∏
    rank_range = st.sidebar.slider(
        "–ü–æ–∑–∏—Ü–∏—è –≤ –≤—ã–¥–∞—á–µ",
        min_value=int(df['rank'].min()),
        max_value=int(df['rank'].max()),
        value=(int(df['rank'].min()), int(df['rank'].max()))
    )
    filters['rank_min'] = rank_range[0]
    filters['rank_max'] = rank_range[1]

    # –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
    search_text = st.sidebar.text_input("–ü–æ–∏—Å–∫ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö")
    if search_text:
        filters['search_text'] = search_text.lower()

    return filters


def apply_filters(df: pd.DataFrame, filters: Dict) -> pd.DataFrame:
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ DataFrame"""
    filtered_df = df.copy()

    if 'domain' in filters:
        filtered_df = filtered_df[filtered_df['domain'] == filters['domain']]

    if 'result_type' in filters:
        filtered_df = filtered_df[filtered_df['result_type']
                                  == filters['result_type']]

    if 'rank_min' in filters and 'rank_max' in filters:
        filtered_df = filtered_df[
            (filtered_df['rank'] >= filters['rank_min']) &
            (filtered_df['rank'] <= filters['rank_max'])
        ]

    if 'search_text' in filters:
        mask = (
            filtered_df['title'].str.lower().str.contains(filters['search_text'], na=False) |
            filtered_df['snippet'].str.lower().str.contains(filters['search_text'], na=False) |
            filtered_df['address'].str.lower().str.contains(
                filters['search_text'], na=False)
        )
        filtered_df = filtered_df[mask]

    return filtered_df


def create_export_section(df: pd.DataFrame):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
    st.subheader("üì• –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

    col1, col2, col3 = st.columns(3)

    with col1:
        csv = df.to_csv(index=False, encoding='utf-8-sig')
        st.download_button(
            label="–°–∫–∞—á–∞—Ç—å CSV",
            data=csv.encode('utf-8-sig'),
            file_name="search_results.csv",
            mime="text/csv"
        )

    with col2:
        # Excel —ç–∫—Å–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        import io
        buffer = io.BytesIO()
        with pd.ExcelWriter(buffer, engine='openpyxl') as writer:
            df.to_excel(writer, sheet_name='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã', index=False)

        st.download_button(
            label="–°–∫–∞—á–∞—Ç—å Excel",
            data=buffer.getvalue(),
            file_name="search_results.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

    with col3:
        json_str = json.dumps(df.to_dict(orient='records'),
                              ensure_ascii=False, indent=2)
        st.download_button(
            label="–°–∫–∞—á–∞—Ç—å JSON",
            data=json_str,
            file_name="search_results.json",
            mime="application/json"
        )
