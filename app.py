from utils.data_processor import DataProcessor
from utils.analyzer import ResultAnalyzer
from utils.display import (
    display_search_result,
    display_search_results_grid,
    display_statistics_cards,
    create_filter_sidebar,
    apply_filters,
    create_export_section
)
import streamlit as st
import pandas as pd
import json
import time
import logging
import os
import sys
import requests
sys.path.append("llm")


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Streamlit
logging.basicConfig(level=logging.INFO)

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π

# –ò–º–ø–æ—Ä—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
try:
    from utils.browser_agent import run_local_browser_search
    BROWSER_AVAILABLE = True
except ImportError as e:
    BROWSER_AVAILABLE = False
    st.error(f"‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∞–≥–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="ü§ñ –õ–æ–∫–∞–ª—å–Ω—ã–π –ò–ò –ü–æ–∏—Å–∫ –ê–¥—Ä–µ—Å–æ–≤",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –°—Ç–∏–ª–∏
st.markdown("""
<style>
    .stApp {
        max-width: 1200px;
        margin: 0 auto;
    }
    .search-result {
        padding: 10px;
        margin: 10px 0;
        border-radius: 8px;
        background-color: #f8f9fa;
    }
    .main-header {
        text-align: center;
        padding: 20px 0;
        background: linear-gradient(90deg, #4CAF50, #2196F3);
        color: white;
        border-radius: 10px;
        margin-bottom: 20px;
    }
    .text-analysis {
        background-color: #f0f2f6;
        padding: 15px;
        border-radius: 8px;
        border-left: 4px solid #1f77b4;
        margin: 10px 0;
    }
    .extracted-text {
        background-color: #fff3cd;
        padding: 15px;
        border-radius: 8px;
        border-left: 4px solid #ffc107;
        margin: 10px 0;
        font-family: monospace;
        white-space: pre-wrap;
        max-height: 400px;
        overflow-y: auto;
    }
</style>
""", unsafe_allow_html=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.markdown("""
<div class="main-header">
    <h1>ü§ñ –õ–æ–∫–∞–ª—å–Ω—ã–π –ò–ò –ü–æ–∏—Å–∫ –ê–¥—Ä–µ—Å–æ–≤</h1>
    <p>–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∞–≥–µ–Ω—Ç —Å –ò–ò –∞–Ω–∞–ª–∏–∑–æ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤</p>
</div>
""", unsafe_allow_html=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
if 'search_results' not in st.session_state:
    st.session_state.search_results = []
if 'results_df' not in st.session_state:
    st.session_state.results_df = pd.DataFrame()

if not BROWSER_AVAILABLE:
    st.error("""
    ‚ùå **–õ–æ–∫–∞–ª—å–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∞–≥–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!**
    
    –î–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
    
    ```bash
    pip install -r requirements.txt
    playwright install chromium
    ```
    
    –¢–∞–∫–∂–µ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Tesseract OCR:
    - Windows: https://github.com/UB-Mannheim/tesseract/wiki
    - Linux: `sudo apt-get install tesseract-ocr tesseract-ocr-rus`
    - macOS: `brew install tesseract tesseract-lang`
    """)
    st.stop()

# –í–∫–ª–∞–¥–∫–∏
tab1, tab2, tab3, tab4, tab_verdict, tab5 = st.tabs(
    ["üöÄ –ü–æ–∏—Å–∫", "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã", "ü§ñ –ò–ò –ê–Ω–∞–ª–∏–∑", "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "üßë‚Äç‚öñÔ∏è –í–µ—Ä–¥–∏–∫—Ç", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"])

with tab1:
    st.header("üöÄ –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–æ–≤")

    st.info("""
    **ü§ñ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ò–ò –∞–≥–µ–Ω—Ç–∞:**
    - ‚úÖ –ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö API
    - üåê –†–µ–∞–ª—å–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä Chrome –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
    - üì∏ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∫–∞–∂–¥–æ–≥–æ –ø–æ–∏—Å–∫–∞
    - ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    - üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
    - üõ°Ô∏è –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–ø—á–∏ –∏ –ø—Ä–æ–±–ª–µ–º
    """)

    # –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    input_method = st.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:",
        ["üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", "üìù –í—Å—Ç–∞–≤–∏—Ç—å JSON"],
        horizontal=True
    )

    addresses = []
    data = []

    if input_method == "üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª":
        uploaded_file = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ JSON —Ñ–∞–π–ª —Å –∞–¥—Ä–µ—Å–∞–º–∏",
            type=['json'],
            help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –ø–æ–ª–µ–º 'address'"
        )

        if uploaded_file is not None:
            try:
                data = DataProcessor.load_json_file(uploaded_file)
                addresses = DataProcessor.extract_addresses(data)
                st.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(addresses)} –∞–¥—Ä–µ—Å–æ–≤")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
                with st.expander("üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤"):
                    for i, addr in enumerate(addresses[:10]):
                        st.text(f"{i+1}. {addr}")
                    if len(addresses) > 10:
                        st.text(f"... –∏ –µ—â–µ {len(addresses) - 10} –∞–¥—Ä–µ—Å–æ–≤")

            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")

    else:  # –í—Å—Ç–∞–≤–∏—Ç—å JSON
        json_text = st.text_area(
            "–í—Å—Ç–∞–≤—å—Ç–µ JSON –¥–∞–Ω–Ω—ã–µ:",
            height=300,
            placeholder='[\n  {\n    "address": "–ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, –¥. 1"\n  }\n]'
        )

        if json_text:
            try:
                data = DataProcessor.parse_json_text(json_text)
                addresses = DataProcessor.extract_addresses(data)
                st.success(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ {len(addresses)} –∞–¥—Ä–µ—Å–æ–≤")
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {str(e)}")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞
    st.subheader("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞")
    col1, col2, col3 = st.columns(3)

    with col1:
        headless_mode = st.checkbox(
            "üîá –°–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º",
            value=True,
            help="–ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –±–µ–∑ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–∫–Ω–∞"
        )

    with col2:
        save_screenshots = st.checkbox(
            "üì∏ –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã",
            value=True,
            help="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –ø–æ–∏—Å–∫–æ–≤–æ–π –≤—ã–¥–∞—á–∏"
        )

    with col3:
        max_addresses = st.number_input(
            "üìä –ú–∞–∫—Å–∏–º—É–º –∞–¥—Ä–µ—Å–æ–≤",
            min_value=1,
            max_value=50,
            value=min(10, len(addresses)) if addresses else 5,
            help="–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥–æ–ª–≥–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è"
        )

    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –≤—Ä–µ–º–µ–Ω–∏
    if addresses:
        # ~15 —Å–µ–∫ –Ω–∞ –∞–¥—Ä–µ—Å
        estimated_time = len(addresses[:max_addresses]) * 15
        st.info(
            f"‚è±Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {estimated_time // 60} –º–∏–Ω {estimated_time % 60} —Å–µ–∫")

    # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
    if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫", type="primary", disabled=len(addresses) == 0):
        if len(addresses) > max_addresses:
            addresses = addresses[:max_addresses]
            st.warning(f"‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –¥–æ {max_addresses} –∞–¥—Ä–µ—Å–æ–≤")

        st.session_state.search_results = []

        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        progress_bar = st.progress(0)
        status_text = st.empty()

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        results_container = st.container()

        def progress_callback(current, total, address):
            progress = current / total
            progress_bar.progress(progress)
            status_text.text(
                f"üîç –ü–æ–∏—Å–∫ {current + 1}/{total}: {address[:50]}...")

        with st.spinner("ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∞–≥–µ–Ω—Ç..."):
            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –ø–æ–∏—Å–∫
                browser_results = run_local_browser_search(
                    addresses,
                    headless=headless_mode,
                    progress_callback=progress_callback
                )

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                all_results = []
                for browser_result in browser_results:
                    if browser_result.get('results'):
                        for result in browser_result['results']:
                            result['address'] = browser_result['address']
                            all_results.append(result)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                st.session_state.search_results = all_results
                st.session_state.browser_results = browser_results
                st.session_state.results_df = DataProcessor.results_to_dataframe(
                    all_results)

                progress_bar.progress(1.0)
                status_text.text("‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                successful_searches = sum(
                    1 for r in browser_results if r.get('success', False))
                screenshots_count = sum(
                    1 for r in browser_results if r.get('screenshot_path'))
                text_files_count = sum(
                    1 for r in browser_results if r.get('text_file_path'))
                st.success(f"""
                üéâ **–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!**
                - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–¥—Ä–µ—Å–æ–≤: {len(browser_results)}
                - –£—Å–ø–µ—à–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤: {successful_searches}
                - –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(all_results)}
                - –°–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {screenshots_count}
                - –§–∞–π–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞: {text_files_count}
                """)

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞–∂–¥–æ–º—É –∞–¥—Ä–µ—Å—É
                with results_container:
                    st.subheader("üîç –ö—Ä–∞—Ç–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
                    for result in browser_results:
                        if result.get('success'):
                            st.success(
                                f"‚úÖ {result['address']}: {len(result.get('results', []))} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                        else:
                            st.error(
                                f"‚ùå {result['address']}: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")

            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: {str(e)}")
                import traceback
                st.code(traceback.format_exc())

with tab2:
    st.header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞")

    if not st.session_state.results_df.empty:
        # –§–∏–ª—å—Ç—Ä—ã –≤ —Å–∞–π–¥–±–∞—Ä–µ
        filters = create_filter_sidebar(st.session_state.results_df)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        filtered_df = apply_filters(st.session_state.results_df, filters)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
        if not filtered_df.empty:
            analyzer = ResultAnalyzer(filtered_df)
            stats = analyzer.calculate_relevance_stats()
            display_statistics_cards(stats)

            st.markdown("---")

            # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤–∏–¥–∞
            view_mode = st.radio(
                "–†–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
                ["üîç –ü–æ–∏—Å–∫–æ–≤–∞—è –≤—ã–¥–∞—á–∞", "üìä –¢–∞–±–ª–∏—Ü–∞"],
                horizontal=True
            )

            if view_mode == "üîç –ü–æ–∏—Å–∫–æ–≤–∞—è –≤—ã–¥–∞—á–∞":
                # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∞–¥—Ä–µ—Å–∞–º
                address_filter = st.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å:",
                    ["–í—Å–µ –∞–¥—Ä–µ—Å–∞"] +
                    sorted(filtered_df['address'].unique().tolist())
                )

                if address_filter != "–í—Å–µ –∞–¥—Ä–µ—Å–∞":
                    display_df = filtered_df[filtered_df['address']
                                             == address_filter]
                else:
                    display_df = filtered_df

                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                st.subheader(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ ({len(display_df)} –∑–∞–ø–∏—Å–µ–π)")

                # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
                display_df = display_df.sort_values(['address', 'rank'])

                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∞–¥—Ä–µ—Å–∞–º –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                for address in display_df['address'].unique():
                    st.markdown(f"### üìç {address}")
                    address_results = display_df[display_df['address'] == address].to_dict(
                        'records')
                    display_search_results_grid(address_results, columns=1)

            else:  # –¢–∞–±–ª–∏—á–Ω—ã–π –≤–∏–¥
                st.subheader(
                    f"–¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ({len(filtered_df)} –∑–∞–ø–∏—Å–µ–π)")

                # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
                st.dataframe(
                    filtered_df,
                    use_container_width=True,
                    height=600,
                    column_config={
                        "url": st.column_config.LinkColumn("URL"),
                        "rank": st.column_config.NumberColumn("–ü–æ–∑–∏—Ü–∏—è", format="%d"),
                    }
                )

            # –≠–∫—Å–ø–æ—Ä—Ç
            st.markdown("---")
            create_export_section(filtered_df)

        else:
            st.warning("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º")

    else:
        st.info("üëÜ –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–∏—Å–∫ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ '–ü–æ–∏—Å–∫'")

with tab3:
    st.header("ü§ñ –ò–ò –ê–Ω–∞–ª–∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤")

    if 'browser_results' in st.session_state and st.session_state.browser_results:

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_results = len(st.session_state.browser_results)
        successful_results = sum(
            1 for r in st.session_state.browser_results if r.get('success'))
        screenshots_count = sum(
            1 for r in st.session_state.browser_results if r.get('screenshot_path'))
        text_files_count = sum(
            1 for r in st.session_state.browser_results if r.get('text_file_path'))

        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("–í—Å–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤", total_results)
        with col2:
            st.metric("–£—Å–ø–µ—à–Ω—ã—Ö", successful_results)
        with col3:
            st.metric("–°–∫—Ä–∏–Ω—à–æ—Ç–æ–≤", screenshots_count)
        with col4:
            st.metric("–§–∞–π–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞", text_files_count)

        st.markdown("---")

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        for idx, result in enumerate(st.session_state.browser_results):
            with st.expander(f"ü§ñ {result['address']}", expanded=False):

                col1, col2 = st.columns([3, 2])

                with col1:
                    # –ò–ò –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞
                    if result.get('ai_text_analysis'):
                        st.markdown("**ü§ñ –ò–ò –ê–Ω–∞–ª–∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:**")
                        st.markdown('<div class="text-analysis">',
                                    unsafe_allow_html=True)
                        st.text(result['ai_text_analysis'])
                        st.markdown('</div>', unsafe_allow_html=True)

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
                    if result.get('text_file_path') and os.path.exists(result['text_file_path']):
                        st.markdown("**üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞:**")
                        try:
                            with open(result['text_file_path'], 'r', encoding='utf-8') as f:
                                extracted_text = f.read()

                            st.markdown('<div class="extracted-text">',
                                        unsafe_allow_html=True)
                            st.text(extracted_text)
                            st.markdown('</div>', unsafe_allow_html=True)

                            # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
                            st.download_button(
                                label="üíæ –°–∫–∞—á–∞—Ç—å —Ç–µ–∫—Å—Ç",
                                data=extracted_text,
                                file_name=f"extracted_text_{idx+1}.txt",
                                mime="text/plain"
                            )

                        except Exception as e:
                            st.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")

                    # –û–±—ã—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    if result.get('text_analysis'):
                        st.markdown("**üìù –ê–Ω–∞–ª–∏–∑ DOM —Ç–µ–∫—Å—Ç–∞:**")
                        st.info(result['text_analysis'])

                with col2:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
                    if result.get('screenshot_path') and os.path.exists(result['screenshot_path']):
                        st.markdown("**üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–∏—Å–∫–∞:**")
                        try:
                            st.image(
                                result['screenshot_path'],
                                caption=f"–°–∫—Ä–∏–Ω—à–æ—Ç: {result['address'][:30]}...",
                                use_column_width=True
                            )

                            # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
                            with open(result['screenshot_path'], "rb") as file:
                                st.download_button(
                                    label="üì∏ –°–∫–∞—á–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç",
                                    data=file.read(),
                                    file_name=f"screenshot_{idx+1}.png",
                                    mime="image/png"
                                )

                        except Exception as e:
                            st.error(
                                f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {str(e)}")
                    else:
                        st.info("üì∑ –°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

                    # –°—Ç–∞—Ç—É—Å –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                    if result.get('success'):
                        st.success("‚úÖ –ü–æ–∏—Å–∫ —É—Å–ø–µ—à–µ–Ω")
                    else:
                        st.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞")
                        if result.get('error'):
                            st.error(f"–û—à–∏–±–∫–∞: {result['error']}")

                    # –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    results_count = len(result.get('results', []))
                    st.metric("–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ", results_count)

                    if results_count > 0:
                        st.markdown("**üîó –ü–µ—Ä–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:**")
                        for i, res in enumerate(result.get('results', [])[:3]):
                            st.text(
                                f"{i+1}. {res.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:40]}...")

        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏
        st.markdown("---")
        col1, col2, col3 = st.columns(3)
        with col2:
            if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", type="secondary"):
                if 'browser_results' in st.session_state:
                    del st.session_state.browser_results
                if 'search_results' in st.session_state:
                    st.session_state.search_results = []
                if 'results_df' in st.session_state:
                    st.session_state.results_df = pd.DataFrame()
                st.success("‚úÖ –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—â–µ–Ω—ã")
                st.rerun()

    else:
        st.info("üëÜ –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–∏—Å–∫ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ '–ü–æ–∏—Å–∫'")

with tab4:
    st.header("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")

    if not st.session_state.results_df.empty:
        analyzer = ResultAnalyzer(st.session_state.results_df)

        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = analyzer.calculate_relevance_stats()
        display_statistics_cards(stats)

        st.markdown("---")

        # –ì—Ä–∞—Ñ–∏–∫–∏
        col1, col2 = st.columns(2)

        with col1:
            # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –¥–æ–º–µ–Ω–æ–≤
            fig_domains = analyzer.create_domain_pie_chart()
            st.plotly_chart(fig_domains, use_container_width=True)

        with col2:
            # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ç–∏–ø–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            fig_types = analyzer.create_type_bar_chart()
            st.plotly_chart(fig_types, use_container_width=True)

        # –ì—Ä–∞—Ñ–∏–∫ —Ç–æ–ø –¥–æ–º–µ–Ω–æ–≤
        st.subheader("üìä –¢–æ–ø –¥–æ–º–µ–Ω–æ–≤")
        top_n = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–º–µ–Ω–æ–≤", 5, 20, 10)
        fig_top_domains = analyzer.create_top_domains_chart(top_n)
        st.plotly_chart(fig_top_domains, use_container_width=True)

        # –ê–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ü–∏–π
        st.subheader("üìà –ê–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ü–∏–π –ø–æ —Ç–∏–ø–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        position_df = analyzer.get_position_analysis()
        st.dataframe(
            position_df,
            use_container_width=True,
            column_config={
                "avg_position": st.column_config.NumberColumn("–°—Ä–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è", format="%.2f"),
                "min_position": st.column_config.NumberColumn("–ú–∏–Ω. –ø–æ–∑–∏—Ü–∏—è", format="%d"),
                "max_position": st.column_config.NumberColumn("–ú–∞–∫—Å. –ø–æ–∑–∏—Ü–∏—è", format="%d"),
                "count": st.column_config.NumberColumn("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", format="%d")
            }
        )

        # –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞
        if 'browser_results' in st.session_state:
            st.subheader("üéØ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞")

            total_searches = len(st.session_state.browser_results)
            successful = sum(
                1 for r in st.session_state.browser_results if r.get('success', False))

            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("–í—Å–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤", total_searches)
            with col2:
                st.metric("–£—Å–ø–µ—à–Ω—ã—Ö", successful)
            with col3:
                success_rate = (successful / total_searches *
                                100) if total_searches > 0 else 0
                st.metric("–£—Å–ø–µ—à–Ω–æ—Å—Ç—å", f"{success_rate:.1f}%")

    else:
        st.info("üëÜ –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–∏—Å–∫ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ '–ü–æ–∏—Å–∫'")

with tab_verdict:
    st.header("üßë‚Äç‚öñÔ∏è –í–µ—Ä–¥–∏–∫—Ç: –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ –∞–¥—Ä–µ—Å—É")
    st.info("–î–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è —Ç–µ–∫—Å—Ç –≤—ã–¥–∞—á–∏ –∏ –¥–∞—ë—Ç—Å—è –∫—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ LLM: –≤–µ–¥—ë—Ç—Å—è –ª–∏ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ –∞–¥—Ä–µ—Å—É –∏ –ø–æ—á–µ–º—É.")

    if 'browser_results' in st.session_state and st.session_state.browser_results:
        for idx, result in enumerate(st.session_state.browser_results):
            with st.expander(f"{result['address']}", expanded=False):
                # –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                extracted_text = ""
                if result.get('text_file_path') and os.path.exists(result['text_file_path']):
                    try:
                        with open(result['text_file_path'], 'r', encoding='utf-8') as f:
                            extracted_text = f.read()
                    except Exception as e:
                        extracted_text = result.get('ai_text_analysis', '')
                else:
                    extracted_text = result.get('ai_text_analysis', '')

                st.markdown("**üìÑ –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:**")
                st.text_area("–¢–µ–∫—Å—Ç –¥–ª—è LLM", value=extracted_text,
                             height=200, key=f"text_{idx}")

                if st.button(f"–ü–æ–ª—É—á–∏—Ç—å –≤–µ—Ä–¥–∏–∫—Ç –ø–æ –∞–¥—Ä–µ—Å—É {idx+1}", key=f"verdict_btn_{idx}"):
                    with st.spinner("LLM –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ API..."):
                        prompt = f"–í–æ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç –ø–æ–∏—Å–∫–æ–≤–æ–π –≤—ã–¥–∞—á–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –∞–¥—Ä–µ—Å—É. –û–ø—Ä–µ–¥–µ–ª–∏, –≤–µ–¥—ë—Ç—Å—è –ª–∏ –ø–æ —ç—Ç–æ–º—É –∞–¥—Ä–µ—Å—É –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∞–≥–∞–∑–∏–Ω, –æ—Ñ–∏—Å, —É—Å–ª—É–≥–∏, –∞—Ä–µ–Ω–¥–∞, –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∏ —Ç.–ø.)? –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ '–î–∞' –∏–ª–∏ '–ù–µ—Ç' –∏ –∫—Ä–∞—Ç–∫–æ –æ–±—ä—è—Å–Ω–∏ –ø–æ—á–µ–º—É, —Å—Å—ã–ª–∞—è—Å—å –Ω–∞ —Ñ–∞–∫—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞.\n\n–¢–µ–∫—Å—Ç:\n{extracted_text}\n\n–í–µ—Ä–¥–∏–∫—Ç:"
                        system_prompt = "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –∞–¥—Ä–µ—Å—É. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, —Ç–µ–∑–∏—Å–Ω–æ, —Ç–æ–ª—å–∫–æ –ø–æ —Ñ–∞–∫—Ç–∞–º –∏–∑ —Ç–µ–∫—Å—Ç–∞."
                        try:
                            response = requests.post(
                                "http://10.2.0.244:8000/chat",
                                json={
                                    "prompt": prompt,
                                    "system_prompt": system_prompt,
                                    "max_tokens": 128,
                                    "temperature": 0.1
                                },
                                timeout=60
                            )
                            if response.status_code == 200:
                                data = response.json()
                                verdict = data.get(
                                    "response", "[–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM]")
                                st.success(f"**–í–µ—Ä–¥–∏–∫—Ç:** {verdict}")
                            else:
                                st.error(
                                    f"–û—à–∏–±–∫–∞ API: {response.status_code} {response.text}")
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM API: {str(e)}")
    else:
        st.info("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ –ø–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏–∑ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–∫–ª–∞–¥–∫–∞—Ö.")

with tab5:
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")

    st.subheader("ü§ñ –õ–æ–∫–∞–ª—å–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∞–≥–µ–Ω—Ç")

    if BROWSER_AVAILABLE:
        st.success("‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω")

        st.markdown("""
        **üîß –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–∞:**
        - üåê –†–µ–∞–ª—å–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä Chrome/Chromium
        - üì∏ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –≤ –≤—ã—Å–æ–∫–æ–º –∫–∞—á–µ—Å—Ç–≤–µ  
        - ü§ñ –õ–æ–∫–∞–ª—å–Ω–∞—è –ò–ò –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        - üìù OCR –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
        - üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
        - üõ°Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–ø—á–∏
        - üé® –ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        - ‚ö° –ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Ä–∞–±–æ—Ç–∞
        """)

    else:
        st.error("‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∞–≥–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

    st.subheader("üìÅ –§–∞–π–ª–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö –∏ —Ñ–∞–π–ª–∞—Ö
    col1, col2 = st.columns(2)

    with col1:
        st.markdown("**üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç—ã:**")
        screenshots_dir = "screenshots"
        if os.path.exists(screenshots_dir):
            files = os.listdir(screenshots_dir)
            st.info(f"üìÅ {screenshots_dir}/ ({len(files)} —Ñ–∞–π–ª–æ–≤)")
            if files:
                total_size = sum(os.path.getsize(os.path.join(screenshots_dir, f))
                                 for f in files if os.path.isfile(os.path.join(screenshots_dir, f)))
                st.text(f"–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size / 1024 / 1024:.1f} –ú–ë")
        else:
            st.info("üìÅ screenshots/ (–ø–∞–ø–∫–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞)")

    with col2:
        st.markdown("**üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:**")
        text_dir = "extracted_text"
        if os.path.exists(text_dir):
            files = os.listdir(text_dir)
            st.info(f"üìÅ {text_dir}/ ({len(files)} —Ñ–∞–π–ª–æ–≤)")
            if files:
                total_size = sum(os.path.getsize(os.path.join(text_dir, f))
                                 for f in files if os.path.isfile(os.path.join(text_dir, f)))
                st.text(f"–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size / 1024:.1f} –ö–ë")
        else:
            st.info("üìÅ extracted_text/ (–ø–∞–ø–∫–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞)")

    st.subheader("üìã –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")

    with st.expander("üíª –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"):
        st.code("""
# –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
pip install -r requirements.txt

# –ë—Ä–∞—É–∑–µ—Ä Chromium
playwright install chromium

# Tesseract OCR (–¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞)
# Windows: —Å–∫–∞—á–∞–π—Ç–µ —Å https://github.com/UB-Mannheim/tesseract/wiki
# Linux: sudo apt-get install tesseract-ocr tesseract-ocr-rus  
# macOS: brew install tesseract tesseract-lang
        """)

    with st.expander("üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"):
        st.markdown("""
        **–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:**
        - RAM: 4 GB (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 8 GB)
        - –°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ: 1 GB –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ + –º–µ—Å—Ç–æ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
        - Python 3.8+
        - –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: Windows 10+, macOS 10.14+, Ubuntu 18.04+
        
        **–ü—Ä–∏–º–µ—Ä–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:**
        - ~10-15 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∞–¥—Ä–µ—Å
        - ~2-5 –ú–ë –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç
        - ~1-5 –ö–ë –Ω–∞ —Ñ–∞–π–ª —Ç–µ–∫—Å—Ç–∞
        - –ú–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–∞–ø—á–∞–º–∏ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏
        """)

    st.subheader("üìä –õ–æ–≥–∏ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏")

    if 'search_results' in st.session_state and st.session_state.search_results:
        st.write(
            f"üîç –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(st.session_state.search_results)}")
        st.write(
            f"üìç –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤: {st.session_state.results_df['address'].nunique() if not st.session_state.results_df.empty else 0}")

    if 'browser_results' in st.session_state and st.session_state.browser_results:
        st.write(
            f"ü§ñ –ë—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤: {len(st.session_state.browser_results)}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
        screenshots_count = sum(
            1 for r in st.session_state.browser_results if r.get('screenshot_path'))
        text_files_count = sum(
            1 for r in st.session_state.browser_results if r.get('text_file_path'))
        st.write(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {screenshots_count}")
        st.write(f"üìÑ –§–∞–π–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞: {text_files_count}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
        errors = [r.get('error')
                  for r in st.session_state.browser_results if r.get('error')]
        if errors:
            st.write(f"‚ö†Ô∏è –û—à–∏–±–æ–∫: {len(errors)}")
            with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫–∏"):
                for error in errors:
                    st.text(f"‚Ä¢ {error}")

    if not st.session_state.get('search_results') and not st.session_state.get('browser_results'):
        st.info("–õ–æ–≥–∏ –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –ø–æ–∏—Å–∫–∞")

# Footer
st.markdown("---")
st.markdown("""
<div style='text-align: center; color: #666; padding: 20px;'>
    <p>ü§ñ <strong>–õ–æ–∫–∞–ª—å–Ω—ã–π –ò–ò –ü–æ–∏—Å–∫ –ê–¥—Ä–µ—Å–æ–≤ v2.0</strong></p>
    <p>–ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π ‚Ä¢ –° –ò–ò –∞–Ω–∞–ª–∏–∑–æ–º ‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Ñ–∞–π–ª—ã</p>
    <p>–°–æ–∑–¥–∞–Ω–æ —Å ‚ù§Ô∏è –∏—Å–ø–æ–ª—å–∑—É—è Streamlit + Playwright + OpenCV + Tesseract</p>
</div>
""", unsafe_allow_html=True)
