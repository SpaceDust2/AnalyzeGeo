#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
"""

import logging
import sys
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(levelname)s - %(message)s')

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from utils.browser_agent import run_local_browser_search

    def test_single_address():
        """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ–¥–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º –±—Ä–∞—É–∑–µ—Ä–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º"""
        address = "–ú–æ—Å–∫–≤–∞, —É–ª–∏—Ü–∞ –¢–≤–µ—Ä—Å–∫–∞—è, –¥–æ–º 1"

        print(f"ü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∞–≥–µ–Ω—Ç")
        print(f"üìç –ê–¥—Ä–µ—Å: {address}")
        print("=" * 60)

        def progress_callback(current, total, addr):
            print(f"‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å: {current + 1}/{total} - {addr}")

        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ (–Ω–µ –≤ headless —Ä–µ–∂–∏–º–µ –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è)
            results = run_local_browser_search(
                [address],
                headless=False,  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                progress_callback=progress_callback
            )

            print("=" * 60)

            if results and len(results) > 0:
                result = results[0]

                print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω!")
                print(
                    f"üìä –°—Ç–∞—Ç—É—Å: {'–£—Å–ø–µ—Ö' if result.get('success') else '–û—à–∏–±–∫–∞'}")

                if result.get('error'):
                    print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
                else:
                    print(
                        f"üîç –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ DOM: {len(result.get('results', []))}")

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    dom_results = result.get('results', [])
                    if dom_results:
                        print(f"\nüìã –ü–µ—Ä–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
                        for i, res in enumerate(dom_results[:3], 1):
                            print(
                                f"  {i}. {res.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}")
                            print(f"     üîó {res.get('url', '–ë–µ–∑ URL')}")
                            print(f"     üåê {res.get('domain', '–ë–µ–∑ –¥–æ–º–µ–Ω–∞')}")
                            print(
                                f"     üè∑Ô∏è –¢–∏–ø: {res.get('result_type', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                            print()

                # –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                if result.get('local_analysis'):
                    print(f"üîç –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
                    print(result['local_analysis'])
                    print()

                # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞
                if result.get('text_analysis'):
                    print(f"üìù –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:")
                    print(result['text_analysis'])
                    print()

                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ
                if result.get('screenshot_path'):
                    print(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {result['screenshot_path']}")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                    try:
                        import os
                        size = os.path.getsize(result['screenshot_path'])
                        print(f"üìê –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {size / 1024:.1f} KB")
                    except:
                        pass

            else:
                print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
                print("\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                print("- –ë—Ä–∞—É–∑–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
                print("- –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é")
                print("- –ö–∞–ø—á–∞ –∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞")
                print("- –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")

        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            import traceback
            print(f"üìã –î–µ—Ç–∞–ª–∏:\n{traceback.format_exc()}")

    def test_dependencies():
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")
        print("-" * 40)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        deps = {
            'playwright': 'Playwright (–±—Ä–∞—É–∑–µ—Ä)',
            'cv2': 'OpenCV (–∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)',
            'numpy': 'NumPy (–≤—ã—á–∏—Å–ª–µ–Ω–∏—è)',
            'PIL': 'Pillow (—Ä–∞–±–æ—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏)',
            'pytesseract': 'Tesseract OCR (–∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞)'
        }

        for module, description in deps.items():
            try:
                if module == 'cv2':
                    import cv2
                elif module == 'PIL':
                    from PIL import Image
                else:
                    __import__(module)
                print(f"‚úÖ {description}")
            except ImportError:
                print(f"‚ùå {description} - –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–û")

        print()

    if __name__ == "__main__":
        print("ü§ñ –¢–ï–°–¢ –õ–û–ö–ê–õ–¨–ù–û–ì–û –ë–†–ê–£–ó–ï–†–ù–û–ì–û –ê–ì–ï–ù–¢–ê")
        print("=" * 60)

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        test_dependencies()

        # –ó–∞—Ç–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞
        test_single_address()

        print("\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:")
        print("streamlit run app.py")

except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("\nüí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
    print("pip install -r requirements.txt")
    print("playwright install chromium")
except Exception as e:
    print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    import traceback
    traceback.print_exc()
